{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:file((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+)/",
      "destination": "/:file",
      "internal": true,
      "missing": [
        {
          "type": "header",
          "key": "x-nextjs-data"
        }
      ],
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+))/$"
    },
    {
      "source": "/:notfile((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+)",
      "destination": "/:notfile/",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+))$"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "Content-Security-Policy",
          "value": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; media-src 'self' https:; connect-src 'self' https://firestore.googleapis.com https://firebase.googleapis.com https://content.guardianapis.com https://newsapi.org wss://firestore.googleapis.com; frame-src 'none'; object-src 'none'; base-uri 'self'"
        },
        {
          "key": "Permissions-Policy",
          "value": "camera=(), microphone=(), geolocation=(), interest-cohort=()"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    }
  ],
  "dynamicRoutes": [
    {
      "page": "/articles/[id]",
      "regex": "^/articles/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/articles/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/articles/[id]/view",
      "regex": "^/articles/([^/]+?)/view(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/articles/(?<nxtPid>[^/]+?)/view(?:/)?$"
    },
    {
      "page": "/guardian-news/[...articleId]",
      "regex": "^/guardian\\-news/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtParticleId": "nxtParticleId"
      },
      "namedRegex": "^/guardian\\-news/(?<nxtParticleId>.+?)(?:/)?$"
    },
    {
      "page": "/news/[articleId]",
      "regex": "^/news/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtParticleId": "nxtParticleId"
      },
      "namedRegex": "^/news/(?<nxtParticleId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/tag/[tag]",
      "regex": "^/tag/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtag": "nxtPtag"
      },
      "namedRegex": "^/tag/(?<nxtPtag>[^/]+?)(?:/)?$"
    },
    {
      "page": "/user/[username]",
      "regex": "^/user/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/user/(?<nxtPusername>[^/]+?)(?:/)?$"
    },
    {
      "page": "/user/[username]/followers",
      "regex": "^/user/([^/]+?)/followers(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/user/(?<nxtPusername>[^/]+?)/followers(?:/)?$"
    },
    {
      "page": "/user/[username]/following",
      "regex": "^/user/([^/]+?)/following(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/user/(?<nxtPusername>[^/]+?)/following(?:/)?$"
    },
    {
      "page": "/[...firebase_auth]",
      "regex": "^/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPfirebase_auth": "nxtPfirebase_auth"
      },
      "namedRegex": "^/(?<nxtPfirebase_auth>.+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/articles",
      "regex": "^/articles(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/articles(?:/)?$"
    },
    {
      "page": "/compose",
      "regex": "^/compose(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compose(?:/)?$"
    },
    {
      "page": "/create-article",
      "regex": "^/create\\-article(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/create\\-article(?:/)?$"
    },
    {
      "page": "/debug-guardian",
      "regex": "^/debug\\-guardian(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/debug\\-guardian(?:/)?$"
    },
    {
      "page": "/dev",
      "regex": "^/dev(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dev(?:/)?$"
    },
    {
      "page": "/edit-article",
      "regex": "^/edit\\-article(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/edit\\-article(?:/)?$"
    },
    {
      "page": "/email-verified",
      "regex": "^/email\\-verified(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/email\\-verified(?:/)?$"
    },
    {
      "page": "/explore",
      "regex": "^/explore(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/explore(?:/)?$"
    },
    {
      "page": "/forgot-password",
      "regex": "^/forgot\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/forgot\\-password(?:/)?$"
    },
    {
      "page": "/guardian-news",
      "regex": "^/guardian\\-news(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/guardian\\-news(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/messages",
      "regex": "^/messages(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/messages(?:/)?$"
    },
    {
      "page": "/my-profile",
      "regex": "^/my\\-profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/my\\-profile(?:/)?$"
    },
    {
      "page": "/my-profile/edit",
      "regex": "^/my\\-profile/edit(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/my\\-profile/edit(?:/)?$"
    },
    {
      "page": "/my-thoughts",
      "regex": "^/my\\-thoughts(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/my\\-thoughts(?:/)?$"
    },
    {
      "page": "/my-thoughts/reflections",
      "regex": "^/my\\-thoughts/reflections(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/my\\-thoughts/reflections(?:/)?$"
    },
    {
      "page": "/news",
      "regex": "^/news(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/news(?:/)?$"
    },
    {
      "page": "/notifications",
      "regex": "^/notifications(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/notifications(?:/)?$"
    },
    {
      "page": "/profile-setup",
      "regex": "^/profile\\-setup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile\\-setup(?:/)?$"
    },
    {
      "page": "/register",
      "regex": "^/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/register(?:/)?$"
    },
    {
      "page": "/reset-password",
      "regex": "^/reset\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/reset\\-password(?:/)?$"
    },
    {
      "page": "/select-interests",
      "regex": "^/select\\-interests(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/select\\-interests(?:/)?$"
    },
    {
      "page": "/settings",
      "regex": "^/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings(?:/)?$"
    },
    {
      "page": "/test-guardian",
      "regex": "^/test\\-guardian(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-guardian(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}