{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sirabdisalam/journalite-article-page/src/firebase/clientApp.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getAuth, connectAuthEmulator } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Firebase configuration from environment variables\nconst firebaseConfig = {\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n    measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\n};\n///\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Analytics only in browser environment\nlet analytics;\nif (typeof window !== 'undefined') {\n    try {\n        analytics = getAnalytics(app);\n    } catch (error) {\n        // Analytics initialization skipped in development\n    }\n}\n\n// Initialize Firebase Authentication\nconst auth = getAuth(app);\n\n// Initialize Firestore\nconst db = getFirestore(app);\n\n// Configure custom auth actions URL\nif (typeof window !== 'undefined') {\n    const actionCodeSettings = {\n        url: `${window.location.origin}/reset-password`,\n        handleCodeInApp: true,\n    };\n\n    // We need to update this in the forgot-password component when sending the reset email\n}\n\n// // Connect to Auth Emulator in development\n// if (process.env.NODE_ENV === 'development') {\n//     // connectAuthEmulator(auth, \"http://localhost:9099\", { disableWarnings: true });\n// }\n\n/////\n\nexport { app, analytics, auth, db };"],"names":[],"mappings":"AAAA,uDAAuD;;;;;;;AAU3C;AATZ;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;AACA,4DAA4D;AAC5D,iEAAiE;AAEjE,oDAAoD;AACpD,MAAM,iBAAiB;IACnB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACjB;AACA,GAAG;AAEH,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AAE1B,mDAAmD;AACnD,IAAI;AACJ,wCAAmC;IAC/B,IAAI;QACA,YAAY,CAAA,GAAA,6KAAA,CAAA,eAAY,AAAD,EAAE;IAC7B,EAAE,OAAO,OAAO;IACZ,kDAAkD;IACtD;AACJ;AAEA,qCAAqC;AACrC,MAAM,OAAO,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE;AAErB,uBAAuB;AACvB,MAAM,KAAK,CAAA,GAAA,sKAAA,CAAA,eAAY,AAAD,EAAE;AAExB,oCAAoC;AACpC,wCAAmC;IAC/B,MAAM,qBAAqB;QACvB,KAAK,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC;QAC/C,iBAAiB;IACrB;AAEA,uFAAuF;AAC3F","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/sirabdisalam/journalite-article-page/src/firebase/notifications.ts"],"sourcesContent":["import {\n    collection,\n    addDoc,\n    getDocs,\n    getDoc,\n    doc,\n    query,\n    orderBy,\n    Timestamp,\n    where,\n    updateDoc,\n    deleteDoc,\n    limit\n} from 'firebase/firestore';\nimport { db, auth } from './clientApp';\n\n// Notification interface matching Firestore structure\nexport interface Notification {\n    id?: string;\n    userId: string;\n    type: 'comment' | 'reply' | 'like' | 'follow';\n    read: boolean;\n    sourceId: string; // ID of the article/comment\n    sourceType: 'article' | 'comment' | 'user';\n    message: string;\n    fromUser: {\n        id: string;\n        name: string;\n        username?: string; // Add username field for profile links\n    };\n    createdAt: Timestamp;\n    articleSlug?: string; // Optional slug to link directly to the article\n    articleTitle?: string; // Optional article title for context\n}\n\n/**\n * Create a new notification when someone comments on a user's post\n */\nexport async function createCommentNotification(\n    ownerId: string,\n    articleId: string,\n    articleSlug: string,\n    articleTitle: string,\n    commentId: string,\n    commentText: string\n) {\n    try {\n        // Skip if the owner is the commenter (don't notify yourself)\n        const currentUser = auth.currentUser;\n        if (!currentUser || currentUser.uid === ownerId) {\n            return null;\n        }\n\n        // Create notification object\n        const notification: Omit<Notification, 'id'> = {\n            userId: ownerId, // Who will receive the notification\n            type: 'comment',\n            read: false,\n            sourceId: commentId,\n            sourceType: 'comment',\n            message: `${currentUser.displayName || 'Someone'} commented on your article: \"${commentText.substring(0, 50)}${commentText.length > 50 ? '...' : ''}\"`,\n            fromUser: {\n                id: currentUser.uid,\n                name: currentUser.displayName || 'Anonymous'\n            },\n            createdAt: Timestamp.now(),\n            articleSlug,\n            articleTitle\n        };\n\n        // Add to Firestore\n        const docRef = await addDoc(collection(db, 'notifications'), notification);\n\n        return {\n            id: docRef.id,\n            ...notification\n        };\n    } catch (error) {\n        console.error('Error creating notification:', error);\n        return null;\n    }\n}\n\n/**\n * Create a new notification when someone follows a user\n */\nexport async function createFollowNotification(\n    targetUserId: string,\n    followerName: string,\n    followerId: string,\n    followerUsername: string\n) {\n    try {\n        // Skip if user is following themselves (shouldn't happen due to checks in followUser)\n        if (targetUserId === followerId) {\n            return null;\n        }\n\n        // Create notification object\n        const notification: Omit<Notification, 'id'> = {\n            userId: targetUserId, // Who will receive the notification\n            type: 'follow',\n            read: false,\n            sourceId: followerId,\n            sourceType: 'user',\n            message: `${followerName} (@${followerUsername}) started following you`,\n            fromUser: {\n                id: followerId,\n                name: followerName,\n                username: followerUsername\n            },\n            createdAt: Timestamp.now()\n        };\n\n        // Add to Firestore\n        const docRef = await addDoc(collection(db, 'notifications'), notification);\n\n        return {\n            id: docRef.id,\n            ...notification\n        };\n    } catch (error) {\n        console.error('Error creating follow notification:', error);\n        return null;\n    }\n}\n\n/**\n * Get all notifications for the current user\n */\nexport async function getUserNotifications(unreadOnly = false) {\n    try {\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error('User not authenticated');\n        }\n\n        // Create base query\n        const notificationsRef = collection(db, 'notifications');\n        let q;\n\n        if (unreadOnly) {\n            // Only fetch unread notifications\n            q = query(\n                notificationsRef,\n                where('userId', '==', currentUser.uid),\n                where('read', '==', false),\n                orderBy('createdAt', 'desc'),\n                limit(100)\n            );\n        } else {\n            // Fetch all notifications\n            q = query(\n                notificationsRef,\n                where('userId', '==', currentUser.uid),\n                orderBy('createdAt', 'desc'),\n                limit(100)\n            );\n        }\n\n        const querySnapshot = await getDocs(q);\n\n        const notifications: Notification[] = [];\n        querySnapshot.forEach((doc) => {\n            notifications.push({\n                id: doc.id,\n                ...doc.data() as Omit<Notification, 'id'>\n            });\n        });\n\n        return notifications;\n    } catch (error) {\n        console.error('Error fetching notifications:', error);\n        throw error;\n    }\n}\n\n/**\n * Mark a notification as read\n */\nexport async function markNotificationAsRead(notificationId: string) {\n    try {\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error('User not authenticated');\n        }\n\n        const notificationRef = doc(db, 'notifications', notificationId);\n        const notificationSnap = await getDoc(notificationRef);\n\n        if (!notificationSnap.exists()) {\n            throw new Error('Notification not found');\n        }\n\n        const notificationData = notificationSnap.data() as Notification;\n\n        // Check if the notification belongs to the current user\n        if (notificationData.userId !== currentUser.uid) {\n            throw new Error('Unauthorized access to notification');\n        }\n\n        // Update the read status\n        await updateDoc(notificationRef, {\n            read: true\n        });\n\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error marking notification as read:', error);\n        throw error;\n    }\n}\n\n/**\n * Mark all notifications as read for the current user\n */\nexport async function markAllNotificationsAsRead() {\n    try {\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error('User not authenticated');\n        }\n\n        const notificationsRef = collection(db, 'notifications');\n        const q = query(\n            notificationsRef,\n            where('userId', '==', currentUser.uid),\n            where('read', '==', false)\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        // Create an array of promises to update each notification\n        const updatePromises = querySnapshot.docs.map(doc =>\n            updateDoc(doc.ref, { read: true })\n        );\n\n        // Execute all updates in parallel\n        await Promise.all(updatePromises);\n\n        return {\n            success: true,\n            count: querySnapshot.size\n        };\n    } catch (error) {\n        console.error('Error marking all notifications as read:', error);\n        throw error;\n    }\n}\n\n/**\n * Delete a notification\n */\nexport async function deleteNotification(notificationId: string) {\n    try {\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error('User not authenticated');\n        }\n\n        const notificationRef = doc(db, 'notifications', notificationId);\n        const notificationSnap = await getDoc(notificationRef);\n\n        if (!notificationSnap.exists()) {\n            throw new Error('Notification not found');\n        }\n\n        const notificationData = notificationSnap.data() as Notification;\n\n        // Check if the notification belongs to the current user\n        if (notificationData.userId !== currentUser.uid) {\n            throw new Error('Unauthorized access to notification');\n        }\n\n        // Delete the notification\n        await deleteDoc(notificationRef);\n\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error deleting notification:', error);\n        throw error;\n    }\n}\n\n/**\n * Get the count of unread notifications\n */\nexport async function getUnreadNotificationsCount() {\n    try {\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            return 0;\n        }\n\n        const notificationsRef = collection(db, 'notifications');\n        const q = query(\n            notificationsRef,\n            where('userId', '==', currentUser.uid),\n            where('read', '==', false)\n        );\n\n        const querySnapshot = await getDocs(q);\n        return querySnapshot.size;\n    } catch (error) {\n        console.error('Error counting unread notifications:', error);\n        return 0;\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file:///Users/sirabdisalam/journalite-article-page/src/services/userService.ts"],"sourcesContent":["import {\n    doc,\n    setDoc,\n    getDoc,\n    query,\n    collection,\n    where,\n    getDocs,\n    serverTimestamp,\n    updateDoc,\n    arrayUnion,\n    arrayRemove,\n    increment,\n    limit,\n    deleteDoc\n} from 'firebase/firestore';\nimport { updateProfile, deleteUser as deleteFirebaseAuthUser } from 'firebase/auth';\nimport { auth, db } from '../firebase/clientApp';\nimport { createFollowNotification } from '../firebase/notifications';\n\nexport interface UserProfile {\n    uid: string;\n    firstName: string;\n    lastName: string;\n    username: string;\n    email: string;\n    bio?: string;\n    createdAt: any;\n    following?: string[];\n    followers?: string[];\n    followersCount?: number;\n    followingCount?: number;\n    interests?: string[];\n}\n\n/**\n * Checks if a username is already taken\n * @param username The username to check\n * @returns A promise that resolves to a boolean indicating if the username is taken\n */\nexport async function isUsernameTaken(username: string): Promise<boolean> {\n    try {\n        const usernameQuery = query(\n            collection(db, 'users'),\n            where('username', '==', username.toLowerCase())\n        );\n\n        const querySnapshot = await getDocs(usernameQuery);\n        return !querySnapshot.empty;\n    } catch (error) {\n        console.error('Error checking username:', error);\n        throw error;\n    }\n}\n\n/**\n * Creates a user profile in Firestore\n * @param uid User's Firebase Auth UID\n * @param profile User profile data\n */\nexport async function createUserProfile(uid: string, profile: Omit<UserProfile, 'uid' | 'createdAt'>): Promise<void> {\n    try {\n        // First check if this user ID already has a profile\n        const existingUserProfile = await getUserProfile(uid);\n        if (existingUserProfile) {\n            console.log('User profile already exists, updating instead of creating');\n\n            // Update existing profile\n            const userRef = doc(db, 'users', uid);\n            await updateDoc(userRef, {\n                firstName: profile.firstName,\n                lastName: profile.lastName,\n                username: profile.username.toLowerCase(),\n                email: profile.email.toLowerCase(),\n                bio: profile.bio || existingUserProfile.bio || ''\n            });\n\n            // Update the user's display name in Firebase Auth\n            if (auth.currentUser) {\n                await updateProfile(auth.currentUser, {\n                    displayName: profile.username\n                });\n            }\n\n            return;\n        }\n\n        // Check if email already exists in another profile\n        const emailQuery = query(\n            collection(db, 'users'),\n            where('email', '==', profile.email.toLowerCase())\n        );\n\n        const emailQuerySnapshot = await getDocs(emailQuery);\n        if (!emailQuerySnapshot.empty) {\n            throw new Error('Email is already associated with another account');\n        }\n\n        // Check if the username is already taken\n        const usernameTaken = await isUsernameTaken(profile.username);\n        if (usernameTaken) {\n            throw new Error('Username is already taken');\n        }\n\n        const userRef = doc(db, 'users', uid);\n\n        // Create the user profile\n        await setDoc(userRef, {\n            uid,\n            firstName: profile.firstName,\n            lastName: profile.lastName,\n            username: profile.username.toLowerCase(),\n            email: profile.email.toLowerCase(),\n            bio: profile.bio || '',\n            createdAt: serverTimestamp()\n        });\n\n        // Update the user's display name in Firebase Auth\n        if (auth.currentUser) {\n            await updateProfile(auth.currentUser, {\n                displayName: profile.username\n            });\n        }\n    } catch (error) {\n        console.error('Error creating user profile:', error);\n        throw error;\n    }\n}\n\n/**\n * Gets a user's profile from Firestore\n * @param uid User's Firebase Auth UID\n * @returns A promise that resolves to the user's profile or null if not found\n */\nexport async function getUserProfile(uid: string): Promise<UserProfile | null> {\n    try {\n        const userRef = doc(db, 'users', uid);\n        const userDoc = await getDoc(userRef);\n\n        if (userDoc.exists()) {\n            return userDoc.data() as UserProfile;\n        }\n\n        return null;\n    } catch (error) {\n        console.error('Error fetching user profile:', error);\n        throw error;\n    }\n}\n\n/**\n * Gets a user's profile from Firestore based on their email\n * @param email User's email address\n * @returns A promise that resolves to the user's profile or null if not found\n */\nexport async function getUserProfileByEmail(email: string): Promise<UserProfile | null> {\n    if (!email) return null;\n    try {\n        const emailQuery = query(\n            collection(db, 'users'),\n            where('email', '==', email.toLowerCase()),\n            limit(1)\n        );\n        const querySnapshot = await getDocs(emailQuery);\n        if (!querySnapshot.empty) {\n            // Should only be one user with a unique email\n            return querySnapshot.docs[0].data() as UserProfile;\n        }\n        return null;\n    } catch (error) {\n        console.error('Error fetching user profile by email:', error);\n        throw error; // Re-throw to be handled by the caller\n    }\n}\n\n/**\n * Updates a user's bio\n * @param uid User's Firebase Auth UID\n * @param bio User's new bio\n * @returns A promise that resolves when the bio is updated\n */\nexport async function updateUserBio(uid: string, bio: string): Promise<void> {\n    try {\n        const userRef = doc(db, 'users', uid);\n        await updateDoc(userRef, {\n            bio\n        });\n    } catch (error) {\n        console.error('Error updating user bio:', error);\n        throw error;\n    }\n}\n\n/**\n * Updates a user's selected interests\n * @param uid User's Firebase Auth UID\n * @param interests Array of selected interests\n * @returns A promise that resolves when the interests are updated\n */\nexport async function updateUserInterests(uid: string, interests: string[]): Promise<void> {\n    try {\n        const userRef = doc(db, 'users', uid);\n        await updateDoc(userRef, {\n            interests\n        });\n        console.log(`Interests updated for user ${uid}:`, interests);\n    } catch (error) {\n        console.error('Error updating user interests:', error);\n        throw error;\n    }\n}\n\n/**\n * Search for users by username or name\n * @param searchTerm The search term to find users\n * @returns Array of matching users\n */\nexport async function searchUsers(searchTerm: string): Promise<UserProfile[]> {\n    try {\n        if (!searchTerm || searchTerm.trim().length < 2) {\n            return [];\n        }\n\n        const searchTermLower = searchTerm.toLowerCase().trim();\n\n        // Create a query to find users whose username contains the search term\n        const usersRef = collection(db, 'users');\n        const usersSnapshot = await getDocs(usersRef);\n\n        // Filter users locally since Firestore doesn't support contains or regexp queries directly\n        const matchingUsers = usersSnapshot.docs\n            .map(doc => {\n                // Get all data from the document and ensure it has the correct UserProfile shape\n                const userData = doc.data() as UserProfile;\n                return userData;\n            })\n            .filter(user => {\n                const usernameLower = user.username.toLowerCase();\n                const firstNameLower = user.firstName.toLowerCase();\n                const lastNameLower = user.lastName.toLowerCase();\n                const fullNameLower = `${firstNameLower} ${lastNameLower}`;\n\n                return usernameLower.includes(searchTermLower) ||\n                    firstNameLower.includes(searchTermLower) ||\n                    lastNameLower.includes(searchTermLower) ||\n                    fullNameLower.includes(searchTermLower);\n            });\n\n        return matchingUsers;\n    } catch (error) {\n        console.error('Error searching users:', error);\n        return [];\n    }\n}\n\n/**\n * Follows a user\n * @param followerUid UID of the user who wants to follow\n * @param followingUid UID of the user to be followed\n * @returns A promise that resolves when the follow relationship is created\n */\nexport async function followUser(followerUid: string, followingUid: string): Promise<void> {\n    try {\n        // Don't allow users to follow themselves\n        if (followerUid === followingUid) {\n            throw new Error('You cannot follow yourself');\n        }\n\n        // Update the follower's following list\n        const followerRef = doc(db, 'users', followerUid);\n        await updateDoc(followerRef, {\n            following: arrayUnion(followingUid),\n            followingCount: increment(1)\n        });\n\n        // Update the following's followers list\n        const followingRef = doc(db, 'users', followingUid);\n        await updateDoc(followingRef, {\n            followers: arrayUnion(followerUid),\n            followersCount: increment(1)\n        });\n\n        // Get the follower's profile to use their name for the notification\n        const followerDoc = await getDoc(followerRef);\n        if (followerDoc.exists()) {\n            const followerData = followerDoc.data() as UserProfile;\n            // Create a notification for the user being followed\n            await createFollowNotification(\n                followingUid,\n                `${followerData.firstName} ${followerData.lastName}`,\n                followerUid,\n                followerData.username\n            );\n        }\n    } catch (error) {\n        console.error('Error following user:', error);\n        throw error;\n    }\n}\n\n/**\n * Unfollows a user\n * @param followerUid UID of the user who wants to unfollow\n * @param followingUid UID of the user to be unfollowed\n * @returns A promise that resolves when the follow relationship is removed\n */\nexport async function unfollowUser(followerUid: string, followingUid: string): Promise<void> {\n    try {\n        // Update the follower's following list\n        const followerRef = doc(db, 'users', followerUid);\n        await updateDoc(followerRef, {\n            following: arrayRemove(followingUid),\n            followingCount: increment(-1)\n        });\n\n        // Update the following's followers list\n        const followingRef = doc(db, 'users', followingUid);\n        await updateDoc(followingRef, {\n            followers: arrayRemove(followerUid),\n            followersCount: increment(-1)\n        });\n    } catch (error) {\n        console.error('Error unfollowing user:', error);\n        throw error;\n    }\n}\n\n/**\n * Checks if a user is following another user\n * @param followerUid UID of the potential follower\n * @param followingUid UID of the user who might be followed\n * @returns Promise resolving to a boolean indicating if follower follows following\n */\nexport async function isFollowing(followerUid: string, followingUid: string): Promise<boolean> {\n    try {\n        const followerRef = doc(db, 'users', followerUid);\n        const followerDoc = await getDoc(followerRef);\n\n        if (!followerDoc.exists()) {\n            return false;\n        }\n\n        const userData = followerDoc.data() as UserProfile;\n        return userData.following?.includes(followingUid) || false;\n    } catch (error) {\n        console.error('Error checking follow status:', error);\n        throw error;\n    }\n}\n\n/**\n * Gets a list of users that a user is following\n * @param uid User's Firebase Auth UID\n * @param maxLimit Maximum number of results to return\n * @returns Promise resolving to an array of user profiles\n */\nexport async function getFollowing(uid: string, maxLimit = 50): Promise<UserProfile[]> {\n    try {\n        // First get the user to access their following list\n        const userRef = doc(db, 'users', uid);\n        const userDoc = await getDoc(userRef);\n\n        if (!userDoc.exists()) {\n            return [];\n        }\n\n        const userData = userDoc.data() as UserProfile;\n        const followingList = userData.following || [];\n\n        if (followingList.length === 0) {\n            return [];\n        }\n\n        // Fetch each following user's profile\n        const followingUsers: UserProfile[] = [];\n        const batchLimit = Math.min(followingList.length, maxLimit);\n\n        for (let i = 0; i < batchLimit; i++) {\n            const followingId = followingList[i];\n            const followingUserRef = doc(db, 'users', followingId);\n            const followingUserDoc = await getDoc(followingUserRef);\n\n            if (followingUserDoc.exists()) {\n                followingUsers.push(followingUserDoc.data() as UserProfile);\n            }\n        }\n\n        return followingUsers;\n    } catch (error) {\n        console.error('Error getting following list:', error);\n        throw error;\n    }\n}\n\n/**\n * Gets a list of users following a user\n * @param uid User's Firebase Auth UID\n * @param maxLimit Maximum number of results to return\n * @returns Promise resolving to an array of user profiles\n */\nexport async function getFollowers(uid: string, maxLimit = 50): Promise<UserProfile[]> {\n    try {\n        // First get the user to access their followers list\n        const userRef = doc(db, 'users', uid);\n        const userDoc = await getDoc(userRef);\n\n        if (!userDoc.exists()) {\n            return [];\n        }\n\n        const userData = userDoc.data() as UserProfile;\n        const followersList = userData.followers || [];\n\n        if (followersList.length === 0) {\n            return [];\n        }\n\n        // Fetch each follower's profile\n        const followers: UserProfile[] = [];\n        const batchLimit = Math.min(followersList.length, maxLimit);\n\n        for (let i = 0; i < batchLimit; i++) {\n            const followerId = followersList[i];\n            const followerUserRef = doc(db, 'users', followerId);\n            const followerUserDoc = await getDoc(followerUserRef);\n\n            if (followerUserDoc.exists()) {\n                followers.push(followerUserDoc.data() as UserProfile);\n            }\n        }\n\n        return followers;\n    } catch (error) {\n        console.error('Error getting followers list:', error);\n        throw error;\n    }\n}\n\n/**\n * Deletes a user's account from Firebase Authentication and their profile from Firestore.\n * IMPORTANT: Deleting a user from Firebase Auth requires recent sign-in. \n * If this operation fails due to 'auth/requires-recent-login', \n * the client-side must handle re-authentication before retrying.\n * @param uid User's Firebase Auth UID\n * @returns A promise that resolves when the account and profile are deleted.\n */\nexport async function deleteUserAccount(uid: string): Promise<void> {\n    try {\n        // 1. Delete user profile from Firestore\n        const userProfileRef = doc(db, 'users', uid);\n        await deleteDoc(userProfileRef);\n        console.log(`User profile for UID ${uid} deleted from Firestore.`);\n\n        // 2. Delete user from Firebase Authentication\n        // This requires the current user to be the one being deleted.\n        // And the user must have signed in recently.\n        const currentUser = auth.currentUser;\n        if (currentUser && currentUser.uid === uid) {\n            await deleteFirebaseAuthUser(currentUser);\n            console.log(`User account for UID ${uid} deleted from Firebase Authentication.`);\n        } else if (!currentUser) {\n            console.error('No current user authenticated. Cannot delete Firebase Auth user.');\n            throw new Error('Authentication required to delete account.');\n        } else {\n            // This case (currentUser.uid !== uid) should ideally not happen if the function\n            // is called correctly from the client for the logged-in user.\n            console.error('Current authenticated user does not match UID to be deleted.');\n            throw new Error('Mismatch between authenticated user and account to be deleted.');\n        }\n\n    } catch (error: any) {\n        console.error('Error deleting user account:', error);\n        // Specific check for re-authentication requirement\n        if (error.code === 'auth/requires-recent-login') {\n            throw new Error('This operation is sensitive and requires recent authentication. Please sign out and sign back in, then try again.');\n        }\n        throw new Error('Failed to delete user account. ' + error.message);\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 618, "column": 0}, "map": {"version":3,"sources":["file:///Users/sirabdisalam/journalite-article-page/src/app/register/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { createUserWithEmailAndPassword, sendEmailVerification, GoogleAuthProvider, signInWithPopup, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../../firebase/clientApp';\nimport { createUserProfile, isUsernameTaken, getUserProfile, getUserProfileByEmail } from '../../services/userService';\n\nasync function handleEmailSignUp(email: string, password: string) {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    if (auth.currentUser) {\n      await sendEmailVerification(auth.currentUser);\n    }\n    console.log('Sign-up successful', userCredential.user);\n    return userCredential;\n  } catch (error) {\n    console.error('Sign-up failed', error);\n    throw error;\n  }\n}\n\nasync function handleGoogleSignUp(router: any) {\n  const provider = new GoogleAuthProvider();\n  try {\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    if (!user.email) {\n      console.error('Google sign-up error: No email associated with the Google account.');\n      throw new Error('Google account has no email. Please try a different account or method.');\n    }\n\n    // Check if a profile already exists for this email\n    const existingProfileByEmail = await getUserProfileByEmail(user.email);\n\n    if (existingProfileByEmail) {\n      // User already exists in Firestore (likely signed up via email/password or previously with Google)\n      // Simply log them in by redirecting to the homepage.\n      // Firebase Auth signInWithPopup would have already signed them into their Firebase Auth account.\n      console.log('Google sign-up attempt for existing email. Logging in instead.', user.email);\n      router.push('/');\n      return; // Stop further processing for new user creation\n    }\n\n    // If no profile by email, it's a truly new user to our system.\n    // Proceed to create a profile for them.\n    console.log('New user via Google sign-up, proceeding with profile creation.');\n\n    // New user needs a profile - prepare data from Google account info\n    const userDisplayName = user.displayName || '';\n    const nameParts = userDisplayName.split(' ');\n    const firstName = nameParts[0] || '';\n    const lastName = nameParts.slice(1).join(' ') || '';\n    \n    // Generate a username from the email address (before the @ symbol)\n    const emailUsername = user.email?.split('@')[0] || '';\n    \n    // Check if the username is already taken\n    const isUsernameAvailable = !(await isUsernameTaken(emailUsername));\n    \n    if (isUsernameAvailable) {\n      // Username is available, create profile with it\n      await createUserProfile(user.uid, {\n        firstName,\n        lastName,\n        username: emailUsername,\n        email: user.email || ''\n      });\n      router.push('/select-interests');\n    } else {\n      // Username is taken, we'll let the user choose a new one in the profile setup page\n      // But we still create a temporary profile with a random suffix\n      const randomSuffix = Math.floor(Math.random() * 10000);\n      await createUserProfile(user.uid, {\n        firstName,\n        lastName,\n        username: `${emailUsername}${randomSuffix}`,\n        email: user.email || ''\n      });\n      router.push('/profile-setup');\n    }\n    \n    console.log('Google sign-up successful', user);\n  } catch (error: any) {\n    // Check specific Firebase error codes\n    if (error.code === 'auth/account-exists-with-different-credential') {\n      throw new Error('An account already exists with the same email address but different sign-in credentials. Please sign in using the original method.');\n    }\n    \n    console.error('Google sign-up failed', error);\n    throw error;\n  }\n}\n\nexport default function Register() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [touchedFields, setTouchedFields] = useState<Record<string, boolean>>({});\n  const [customValidation, setCustomValidation] = useState<Record<string, string>>({});\n  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  \n  const router = useRouter();\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { name, value, validity } = e.target;\n    setTouchedFields({ ...touchedFields, [name]: true });\n    \n    // Clear previous validation message\n    setCustomValidation({ ...customValidation, [name]: '' });\n    \n    // Add a custom validation message if empty\n    if (validity.valueMissing) {\n      let message = 'This field is required';\n      if (name === 'email') message = 'Please enter your email address';\n      if (name === 'password') message = 'Please enter a password';\n      if (name === 'confirmPassword') message = 'Please confirm your password';\n      if (name === 'firstName') message = 'Please enter your first name';\n      if (name === 'lastName') message = 'Please enter your last name';\n      if (name === 'username') message = 'Please choose a username';\n      \n      setCustomValidation({ ...customValidation, [name]: message });\n    }\n  };\n\n  const checkUsername = async (username: string) => {\n    if (username.length < 2) {\n      setUsernameAvailable(null);\n      return;\n    }\n    \n    try {\n      setIsCheckingUsername(true);\n      const taken = await isUsernameTaken(username);\n      setUsernameAvailable(!taken);\n    } catch (error) {\n      console.error('Error checking username:', error);\n    } finally {\n      setIsCheckingUsername(false);\n    }\n  };\n\n  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setUsername(value);\n    \n    // Debounce the username check\n    const timeoutId = setTimeout(() => {\n      if (value.length >= 2) {\n        checkUsername(value);\n      } else {\n        setUsernameAvailable(null);\n      }\n    }, 500);\n    \n    return () => clearTimeout(timeoutId);\n  };\n\n  const validateForm = () => {\n    const newValidation: Record<string, string> = {};\n    const newTouchedFields: Record<string, boolean> = {};\n    let isValid = true;\n    \n    // Email validation\n    newTouchedFields.email = true;\n    if (!email.trim()) {\n      newValidation.email = 'Please enter your email address';\n      isValid = false;\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      newValidation.email = 'Please enter a valid email address';\n      isValid = false;\n    }\n    \n    // Password validation\n    newTouchedFields.password = true;\n    if (!password) {\n      newValidation.password = 'Please enter a password';\n      isValid = false;\n    } else if (password.length < 6) {\n      newValidation.password = 'Password must be at least 6 characters';\n      isValid = false;\n    }\n    \n    // Confirm password validation\n    newTouchedFields.confirmPassword = true;\n    if (password !== confirmPassword) {\n      newValidation.confirmPassword = 'Passwords do not match';\n      isValid = false;\n    }\n    \n    // First name validation\n    newTouchedFields.firstName = true;\n    if (!firstName.trim()) {\n      newValidation.firstName = 'Please enter your first name';\n      isValid = false;\n    }\n    \n    // Last name validation\n    newTouchedFields.lastName = true;\n    if (!lastName.trim()) {\n      newValidation.lastName = 'Please enter your last name';\n      isValid = false;\n    }\n    \n    // Username validation\n    newTouchedFields.username = true;\n    if (!username.trim()) {\n      newValidation.username = 'Please choose a username';\n      isValid = false;\n    } else if (username.length < 2) {\n      newValidation.username = 'Username must be at least 2 characters';\n      isValid = false;\n    } else if (usernameAvailable === false) {\n      newValidation.username = 'This username is already taken';\n      isValid = false;\n    }\n    \n    setTouchedFields({ ...touchedFields, ...newTouchedFields });\n    setCustomValidation({ ...customValidation, ...newValidation });\n    \n    return isValid;\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    if (!validateForm()) {\n      setIsLoading(false);\n      return;\n    }\n\n    if (usernameAvailable === false) {\n      setCustomValidation({ ...customValidation, username: 'This username is already taken.' });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const userCredential = await handleEmailSignUp(email, password);\n      \n      if (userCredential && userCredential.user) {\n        await createUserProfile(userCredential.user.uid, { \n          firstName, \n          lastName, \n          username, \n          email \n        });\n        router.push('/select-interests');\n      } else {\n        setError('Registration failed. Please try again.');\n      }\n    } catch (error: any) {\n      let errorMessage = 'Failed to create account';\n      if (error instanceof Error) {\n        // Handle specific Firebase errors\n        if (error.message.includes('email-already-in-use')) {\n          errorMessage = 'This email is already registered. Please use a different email or sign in.';\n          setCustomValidation({ ...customValidation, email: 'This email is already registered' });\n        } else if (error.message.includes('invalid-email')) {\n          errorMessage = 'Please enter a valid email address';\n          setCustomValidation({ ...customValidation, email: 'Please enter a valid email address' });\n        } else if (error.message.includes('weak-password')) {\n          errorMessage = 'Password is too weak. Please use at least 6 characters.';\n          setCustomValidation({ ...customValidation, password: 'Password is too weak' });\n        } else if (error.message.includes('Username is already taken')) {\n          errorMessage = 'This username is already taken. Please choose a different username.';\n          setCustomValidation({ ...customValidation, username: 'This username is already taken' });\n        }\n      }\n      setError(errorMessage);\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Show validation styling only if field is touched\n  const getInputClasses = (fieldName: string) => {\n    const baseClasses = \"w-full px-4 py-3 bg-white border border-neutral-300 rounded-lg shadow-sm transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-amber-500 focus:border-amber-500 placeholder-neutral-400 text-neutral-700\";\n    \n    if (touchedFields[fieldName] && customValidation[fieldName]) {\n      return `${baseClasses} border-red-400 focus:ring-red-400 focus:border-red-400 bg-red-50 text-red-700 placeholder-red-400`;\n    }\n    \n    // Add green border for valid username\n    if (fieldName === 'username' && username.length >= 2 && usernameAvailable === true) {\n      return `${baseClasses} border-green-400 focus:ring-green-400 focus:border-green-400 bg-green-50 text-green-700 placeholder-green-400`;\n    }\n    \n    return `${baseClasses} hover:border-neutral-400`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-stone-100 to-amber-100 flex font-sans\">\n      {/* Left content area */}\n      <div className=\"w-full md:w-1/2 flex flex-col justify-center p-6 sm:p-8 md:p-12 overflow-y-auto\">\n        <div className=\"w-full max-w-lg mx-auto\">\n          {/* Logo and tagline */}\n          <div className=\"mb-10 text-center md:text-left\">\n            <h1 className=\"text-5xl md:text-6xl font-serif font-medium text-stone-800\">Journalite</h1>\n            <div className=\"mt-3 text-lg text-stone-600\">\n              <p>Every thought has a doorway. This is yours.</p>\n            </div>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-3.5 bg-red-100 text-red-700 text-sm rounded-lg border border-red-200 transition-all duration-300 ease-in-out animate-fadeIn\">\n              {error}\n            </div>\n          )}\n\n          {/* Registration form */}\n          <form onSubmit={handleSubmit} className=\"space-y-5 w-full\" noValidate>\n            <div className=\"flex gap-4\">\n              <div className=\"w-1/2\">\n                <input\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  className={getInputClasses('firstName')}\n                  placeholder=\"First name\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                  onBlur={handleBlur}\n                  required\n                />\n                {touchedFields.firstName && customValidation.firstName && (\n                  <p className=\"mt-1 text-sm text-red-500\">{customValidation.firstName}</p>\n                )}\n              </div>\n              \n              <div className=\"w-1/2\">\n                <input\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  className={getInputClasses('lastName')}\n                  placeholder=\"Last name\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                  onBlur={handleBlur}\n                  required\n                />\n                {touchedFields.lastName && customValidation.lastName && (\n                  <p className=\"mt-1 text-sm text-red-500\">{customValidation.lastName}</p>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"relative\">\n                <input\n                  id=\"username\"\n                  name=\"username\"\n                  type=\"text\"\n                  className={getInputClasses('username')}\n                  placeholder=\"Username\"\n                  value={username}\n                  onChange={handleUsernameChange}\n                  onBlur={handleBlur}\n                  required\n                />\n                {isCheckingUsername && (\n                  <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                    <div className=\"animate-spin h-5 w-5 border-2 border-slate-500 rounded-full border-t-transparent\"></div>\n                  </div>\n                )}\n                {!isCheckingUsername && username.length >= 2 && usernameAvailable === true && (\n                  <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500\">\n                    ✓\n                  </div>\n                )}\n              </div>\n              {touchedFields.username && customValidation.username && (\n                <p className=\"mt-1 text-sm text-red-500\">{customValidation.username}</p>\n              )}\n              {!customValidation.username && username.length >= 2 && usernameAvailable === true && (\n                <p className=\"mt-1 text-sm text-green-500\">Username is available</p>\n              )}\n              {!customValidation.username && username.length >= 2 && usernameAvailable === false && (\n                <p className=\"mt-1 text-sm text-red-500\">Username is already taken</p>\n              )}\n            </div>\n\n            <div>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                className={getInputClasses('email')}\n                placeholder=\"Email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                onBlur={handleBlur}\n                required\n              />\n              {touchedFields.email && customValidation.email && (\n                <p className=\"mt-1 text-sm text-red-500\">{customValidation.email}</p>\n              )}\n            </div>\n\n            <div>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                className={getInputClasses('password')}\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                onBlur={handleBlur}\n                required\n              />\n              {touchedFields.password && customValidation.password && (\n                <p className=\"mt-1 text-sm text-red-500\">{customValidation.password}</p>\n              )}\n            </div>\n\n            <div>\n              <input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                className={getInputClasses('confirmPassword')}\n                placeholder=\"Confirm password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                onBlur={handleBlur}\n                required\n              />\n              {touchedFields.confirmPassword && customValidation.confirmPassword && (\n                <p className=\"mt-1 text-sm text-red-500\">{customValidation.confirmPassword}</p>\n              )}\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"w-full flex items-center justify-center px-4 py-3.5 bg-stone-800 text-white rounded-lg shadow-md hover:bg-stone-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 transition-all duration-200 ease-in-out transform hover:scale-[1.01] active:scale-[0.99] disabled:opacity-70 disabled:cursor-not-allowed\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Creating your account...\n                  </>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <span className=\"mr-2\">→</span>\n                    <span>Create your account</span>\n                  </div>\n                )}\n              </button>\n            </div>\n\n            <div className=\"pt-2 text-center text-sm text-stone-600\">\n              <span className=\"mr-1.5\">Already have an account?</span>\n              <Link href=\"/login\" className=\"font-medium text-amber-600 hover:text-amber-700 hover:underline transition-colors duration-150\">\n                Sign in\n              </Link>\n            </div>\n          </form>\n\n          {/* Social login options */}\n          <div className=\"mt-8 space-y-4\">\n            <p className=\"text-center text-xs text-stone-500\">OR</p>\n            <button \n              className=\"w-full flex items-center justify-center px-4 py-3 border border-stone-300 bg-white text-stone-700 rounded-lg shadow-sm hover:bg-stone-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 transition-all duration-200 ease-in-out transform hover:scale-[1.01] active:scale-[0.99]\"\n              onClick={async () => {\n                try {\n                  setIsLoading(true);\n                  setError('');\n                  await handleGoogleSignUp(router);\n                } catch (err: any) {\n                  console.error('Google sign-up error:', err);\n                  \n                  // Handle specific errors with user-friendly messages\n                  if (err.message?.includes('account already exists')) {\n                    setError('An account with this email already exists. Please use the sign-in page or a different email.');\n                  } else if (err.code === 'auth/popup-closed-by-user') {\n                    setError('Sign-in was cancelled. Please try again.');\n                  } else if (err.code === 'auth/network-request-failed') {\n                    setError('Network error. Please check your internet connection and try again.');\n                  } else {\n                    setError('Google sign-up failed. Please try again or use email registration.');\n                  }\n                } finally {\n                  setIsLoading(false);\n                }\n              }}\n            >\n              <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n              </svg>\n              <span className=\"text-slate-800\">Sign up with Google</span>\n            </button>\n          </div>\n\n          {/* Bottom tagline */}\n          <div className=\"mt-20 mb-8 text-slate-700 italic\">\n            <p>Words are the threads of thought.</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Right image area - Modified to be a background */}\n      <div \n        className=\"hidden md:block md:w-1/2 bg-cover bg-center bg-[url('/images/auth-bg.jpg')]\"\n        // style={{ backgroundImage: \"url('/images/auth-bg.jpg')\" }} // Alternative for specific path\n      >\n        {/* Content inside this div will overlay the background image if any. Usually empty for pure background. */}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAPA;;;;;;;AASA,eAAe,kBAAkB,KAAa,EAAE,QAAgB;IAC9D,IAAI;QACF,MAAM,iBAAiB,MAAM,CAAA,GAAA,qOAAA,CAAA,iCAA8B,AAAD,EAAE,+HAAA,CAAA,OAAI,EAAE,OAAO;QACzE,IAAI,+HAAA,CAAA,OAAI,CAAC,WAAW,EAAE;YACpB,MAAM,CAAA,GAAA,4NAAA,CAAA,wBAAqB,AAAD,EAAE,+HAAA,CAAA,OAAI,CAAC,WAAW;QAC9C;QACA,QAAQ,GAAG,CAAC,sBAAsB,eAAe,IAAI;QACrD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,MAAM;IACR;AACF;AAEA,eAAe,mBAAmB,MAAW;IAC3C,MAAM,WAAW,IAAI,wNAAA,CAAA,qBAAkB;IACvC,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qNAAA,CAAA,kBAAe,AAAD,EAAE,+HAAA,CAAA,OAAI,EAAE;QAC3C,MAAM,OAAO,OAAO,IAAI;QAExB,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,mDAAmD;QACnD,MAAM,yBAAyB,MAAM,CAAA,GAAA,iIAAA,CAAA,wBAAqB,AAAD,EAAE,KAAK,KAAK;QAErE,IAAI,wBAAwB;YAC1B,mGAAmG;YACnG,qDAAqD;YACrD,iGAAiG;YACjG,QAAQ,GAAG,CAAC,kEAAkE,KAAK,KAAK;YACxF,OAAO,IAAI,CAAC;YACZ,QAAQ,gDAAgD;QAC1D;QAEA,+DAA+D;QAC/D,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QAEZ,mEAAmE;QACnE,MAAM,kBAAkB,KAAK,WAAW,IAAI;QAC5C,MAAM,YAAY,gBAAgB,KAAK,CAAC;QACxC,MAAM,YAAY,SAAS,CAAC,EAAE,IAAI;QAClC,MAAM,WAAW,UAAU,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ;QAEjD,mEAAmE;QACnE,MAAM,gBAAgB,KAAK,KAAK,EAAE,MAAM,IAAI,CAAC,EAAE,IAAI;QAEnD,yCAAyC;QACzC,MAAM,sBAAsB,CAAE,MAAM,CAAA,GAAA,iIAAA,CAAA,kBAAe,AAAD,EAAE;QAEpD,IAAI,qBAAqB;YACvB,gDAAgD;YAChD,MAAM,CAAA,GAAA,iIAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,GAAG,EAAE;gBAChC;gBACA;gBACA,UAAU;gBACV,OAAO,KAAK,KAAK,IAAI;YACvB;YACA,OAAO,IAAI,CAAC;QACd,OAAO;YACL,mFAAmF;YACnF,+DAA+D;YAC/D,MAAM,eAAe,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YAChD,MAAM,CAAA,GAAA,iIAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,GAAG,EAAE;gBAChC;gBACA;gBACA,UAAU,GAAG,gBAAgB,cAAc;gBAC3C,OAAO,KAAK,KAAK,IAAI;YACvB;YACA,OAAO,IAAI,CAAC;QACd;QAEA,QAAQ,GAAG,CAAC,6BAA6B;IAC3C,EAAE,OAAO,OAAY;QACnB,sCAAsC;QACtC,IAAI,MAAM,IAAI,KAAK,iDAAiD;YAClE,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM;IACR;AACF;AAEe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA2B,CAAC;IAC7E,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA0B,CAAC;IAClF,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IAC3E,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE7D,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,aAAa,CAAC;QAClB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM;QAC1C,iBAAiB;YAAE,GAAG,aAAa;YAAE,CAAC,KAAK,EAAE;QAAK;QAElD,oCAAoC;QACpC,oBAAoB;YAAE,GAAG,gBAAgB;YAAE,CAAC,KAAK,EAAE;QAAG;QAEtD,2CAA2C;QAC3C,IAAI,SAAS,YAAY,EAAE;YACzB,IAAI,UAAU;YACd,IAAI,SAAS,SAAS,UAAU;YAChC,IAAI,SAAS,YAAY,UAAU;YACnC,IAAI,SAAS,mBAAmB,UAAU;YAC1C,IAAI,SAAS,aAAa,UAAU;YACpC,IAAI,SAAS,YAAY,UAAU;YACnC,IAAI,SAAS,YAAY,UAAU;YAEnC,oBAAoB;gBAAE,GAAG,gBAAgB;gBAAE,CAAC,KAAK,EAAE;YAAQ;QAC7D;IACF;IAEA,MAAM,gBAAgB,OAAO;QAC3B,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,qBAAqB;YACrB;QACF;QAEA,IAAI;YACF,sBAAsB;YACtB,MAAM,QAAQ,MAAM,CAAA,GAAA,iIAAA,CAAA,kBAAe,AAAD,EAAE;YACpC,qBAAqB,CAAC;QACxB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;QAC5C,SAAU;YACR,sBAAsB;QACxB;IACF;IAEA,MAAM,uBAAuB,CAAC;QAC5B,MAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;QAC5B,YAAY;QAEZ,8BAA8B;QAC9B,MAAM,YAAY,WAAW;YAC3B,IAAI,MAAM,MAAM,IAAI,GAAG;gBACrB,cAAc;YAChB,OAAO;gBACL,qBAAqB;YACvB;QACF,GAAG;QAEH,OAAO,IAAM,aAAa;IAC5B;IAEA,MAAM,eAAe;QACnB,MAAM,gBAAwC,CAAC;QAC/C,MAAM,mBAA4C,CAAC;QACnD,IAAI,UAAU;QAEd,mBAAmB;QACnB,iBAAiB,KAAK,GAAG;QACzB,IAAI,CAAC,MAAM,IAAI,IAAI;YACjB,cAAc,KAAK,GAAG;YACtB,UAAU;QACZ,OAAO,IAAI,CAAC,6BAA6B,IAAI,CAAC,QAAQ;YACpD,cAAc,KAAK,GAAG;YACtB,UAAU;QACZ;QAEA,sBAAsB;QACtB,iBAAiB,QAAQ,GAAG;QAC5B,IAAI,CAAC,UAAU;YACb,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ,OAAO,IAAI,SAAS,MAAM,GAAG,GAAG;YAC9B,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ;QAEA,8BAA8B;QAC9B,iBAAiB,eAAe,GAAG;QACnC,IAAI,aAAa,iBAAiB;YAChC,cAAc,eAAe,GAAG;YAChC,UAAU;QACZ;QAEA,wBAAwB;QACxB,iBAAiB,SAAS,GAAG;QAC7B,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,cAAc,SAAS,GAAG;YAC1B,UAAU;QACZ;QAEA,uBAAuB;QACvB,iBAAiB,QAAQ,GAAG;QAC5B,IAAI,CAAC,SAAS,IAAI,IAAI;YACpB,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ;QAEA,sBAAsB;QACtB,iBAAiB,QAAQ,GAAG;QAC5B,IAAI,CAAC,SAAS,IAAI,IAAI;YACpB,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ,OAAO,IAAI,SAAS,MAAM,GAAG,GAAG;YAC9B,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ,OAAO,IAAI,sBAAsB,OAAO;YACtC,cAAc,QAAQ,GAAG;YACzB,UAAU;QACZ;QAEA,iBAAiB;YAAE,GAAG,aAAa;YAAE,GAAG,gBAAgB;QAAC;QACzD,oBAAoB;YAAE,GAAG,gBAAgB;YAAE,GAAG,aAAa;QAAC;QAE5D,OAAO;IACT;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,SAAS;QACT,aAAa;QAEb,IAAI,CAAC,gBAAgB;YACnB,aAAa;YACb;QACF;QAEA,IAAI,sBAAsB,OAAO;YAC/B,oBAAoB;gBAAE,GAAG,gBAAgB;gBAAE,UAAU;YAAkC;YACvF,aAAa;YACb;QACF;QAEA,IAAI;YACF,MAAM,iBAAiB,MAAM,kBAAkB,OAAO;YAEtD,IAAI,kBAAkB,eAAe,IAAI,EAAE;gBACzC,MAAM,CAAA,GAAA,iIAAA,CAAA,oBAAiB,AAAD,EAAE,eAAe,IAAI,CAAC,GAAG,EAAE;oBAC/C;oBACA;oBACA;oBACA;gBACF;gBACA,OAAO,IAAI,CAAC;YACd,OAAO;gBACL,SAAS;YACX;QACF,EAAE,OAAO,OAAY;YACnB,IAAI,eAAe;YACnB,IAAI,iBAAiB,OAAO;gBAC1B,kCAAkC;gBAClC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB;oBAClD,eAAe;oBACf,oBAAoB;wBAAE,GAAG,gBAAgB;wBAAE,OAAO;oBAAmC;gBACvF,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB;oBAClD,eAAe;oBACf,oBAAoB;wBAAE,GAAG,gBAAgB;wBAAE,OAAO;oBAAqC;gBACzF,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB;oBAClD,eAAe;oBACf,oBAAoB;wBAAE,GAAG,gBAAgB;wBAAE,UAAU;oBAAuB;gBAC9E,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,8BAA8B;oBAC9D,eAAe;oBACf,oBAAoB;wBAAE,GAAG,gBAAgB;wBAAE,UAAU;oBAAiC;gBACxF;YACF;YACA,SAAS;YACT,QAAQ,KAAK,CAAC;QAChB,SAAU;YACR,aAAa;QACf;IACF;IAEA,mDAAmD;IACnD,MAAM,kBAAkB,CAAC;QACvB,MAAM,cAAc;QAEpB,IAAI,aAAa,CAAC,UAAU,IAAI,gBAAgB,CAAC,UAAU,EAAE;YAC3D,OAAO,GAAG,YAAY,kGAAkG,CAAC;QAC3H;QAEA,sCAAsC;QACtC,IAAI,cAAc,cAAc,SAAS,MAAM,IAAI,KAAK,sBAAsB,MAAM;YAClF,OAAO,GAAG,YAAY,8GAA8G,CAAC;QACvI;QAEA,OAAO,GAAG,YAAY,yBAAyB,CAAC;IAClD;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA6D;;;;;;8CAC3E,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;kDAAE;;;;;;;;;;;;;;;;;wBAKN,uBACC,6LAAC;4BAAI,WAAU;sCACZ;;;;;;sCAKL,6LAAC;4BAAK,UAAU;4BAAc,WAAU;4BAAmB,UAAU;;8CACnE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,WAAW,gBAAgB;oDAC3B,aAAY;oDACZ,OAAO;oDACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;oDAC5C,QAAQ;oDACR,QAAQ;;;;;;gDAET,cAAc,SAAS,IAAI,iBAAiB,SAAS,kBACpD,6LAAC;oDAAE,WAAU;8DAA6B,iBAAiB,SAAS;;;;;;;;;;;;sDAIxE,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,WAAW,gBAAgB;oDAC3B,aAAY;oDACZ,OAAO;oDACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oDAC3C,QAAQ;oDACR,QAAQ;;;;;;gDAET,cAAc,QAAQ,IAAI,iBAAiB,QAAQ,kBAClD,6LAAC;oDAAE,WAAU;8DAA6B,iBAAiB,QAAQ;;;;;;;;;;;;;;;;;;8CAKzE,6LAAC;;sDACC,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,WAAW,gBAAgB;oDAC3B,aAAY;oDACZ,OAAO;oDACP,UAAU;oDACV,QAAQ;oDACR,QAAQ;;;;;;gDAET,oCACC,6LAAC;oDAAI,WAAU;8DACb,cAAA,6LAAC;wDAAI,WAAU;;;;;;;;;;;gDAGlB,CAAC,sBAAsB,SAAS,MAAM,IAAI,KAAK,sBAAsB,sBACpE,6LAAC;oDAAI,WAAU;8DAAqE;;;;;;;;;;;;wCAKvF,cAAc,QAAQ,IAAI,iBAAiB,QAAQ,kBAClD,6LAAC;4CAAE,WAAU;sDAA6B,iBAAiB,QAAQ;;;;;;wCAEpE,CAAC,iBAAiB,QAAQ,IAAI,SAAS,MAAM,IAAI,KAAK,sBAAsB,sBAC3E,6LAAC;4CAAE,WAAU;sDAA8B;;;;;;wCAE5C,CAAC,iBAAiB,QAAQ,IAAI,SAAS,MAAM,IAAI,KAAK,sBAAsB,uBAC3E,6LAAC;4CAAE,WAAU;sDAA4B;;;;;;;;;;;;8CAI7C,6LAAC;;sDACC,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,WAAW,gBAAgB;4CAC3B,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;4CACxC,QAAQ;4CACR,QAAQ;;;;;;wCAET,cAAc,KAAK,IAAI,iBAAiB,KAAK,kBAC5C,6LAAC;4CAAE,WAAU;sDAA6B,iBAAiB,KAAK;;;;;;;;;;;;8CAIpE,6LAAC;;sDACC,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,WAAW,gBAAgB;4CAC3B,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;4CAC3C,QAAQ;4CACR,QAAQ;;;;;;wCAET,cAAc,QAAQ,IAAI,iBAAiB,QAAQ,kBAClD,6LAAC;4CAAE,WAAU;sDAA6B,iBAAiB,QAAQ;;;;;;;;;;;;8CAIvE,6LAAC;;sDACC,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,WAAW,gBAAgB;4CAC3B,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,mBAAmB,EAAE,MAAM,CAAC,KAAK;4CAClD,QAAQ;4CACR,QAAQ;;;;;;wCAET,cAAc,eAAe,IAAI,iBAAiB,eAAe,kBAChE,6LAAC;4CAAE,WAAU;sDAA6B,iBAAiB,eAAe;;;;;;;;;;;;8CAI9E,6LAAC;8CACC,cAAA,6LAAC;wCACC,MAAK;wCACL,WAAU;wCACV,UAAU;kDAET,0BACC;;8DACE,6LAAC;oDAAI,WAAU;oDAA6C,OAAM;oDAA6B,MAAK;oDAAO,SAAQ;;sEACjH,6LAAC;4DAAO,WAAU;4DAAa,IAAG;4DAAK,IAAG;4DAAK,GAAE;4DAAK,QAAO;4DAAe,aAAY;;;;;;sEACxF,6LAAC;4DAAK,WAAU;4DAAa,MAAK;4DAAe,GAAE;;;;;;;;;;;;gDAC/C;;yEAIR,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAO;;;;;;8DACvB,6LAAC;8DAAK;;;;;;;;;;;;;;;;;;;;;;8CAMd,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAS;;;;;;sDACzB,6LAAC,+JAAA,CAAA,UAAI;4CAAC,MAAK;4CAAS,WAAU;sDAAiG;;;;;;;;;;;;;;;;;;sCAOnI,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAE,WAAU;8CAAqC;;;;;;8CAClD,6LAAC;oCACC,WAAU;oCACV,SAAS;wCACP,IAAI;4CACF,aAAa;4CACb,SAAS;4CACT,MAAM,mBAAmB;wCAC3B,EAAE,OAAO,KAAU;4CACjB,QAAQ,KAAK,CAAC,yBAAyB;4CAEvC,qDAAqD;4CACrD,IAAI,IAAI,OAAO,EAAE,SAAS,2BAA2B;gDACnD,SAAS;4CACX,OAAO,IAAI,IAAI,IAAI,KAAK,6BAA6B;gDACnD,SAAS;4CACX,OAAO,IAAI,IAAI,IAAI,KAAK,+BAA+B;gDACrD,SAAS;4CACX,OAAO;gDACL,SAAS;4CACX;wCACF,SAAU;4CACR,aAAa;wCACf;oCACF;;sDAEA,6LAAC;4CAAI,WAAU;4CAAe,SAAQ;4CAAY,OAAM;;8DACtD,6LAAC;oDAAK,GAAE;oDAA0H,MAAK;;;;;;8DACvI,6LAAC;oDAAK,GAAE;oDAAwI,MAAK;;;;;;8DACrJ,6LAAC;oDAAK,GAAE;oDAAgI,MAAK;;;;;;8DAC7I,6LAAC;oDAAK,GAAE;oDAAsI,MAAK;;;;;;;;;;;;sDAErJ,6LAAC;4CAAK,WAAU;sDAAiB;;;;;;;;;;;;;;;;;;sCAKrC,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;0CAAE;;;;;;;;;;;;;;;;;;;;;;0BAMT,6LAAC;gBACC,WAAU;;;;;;;;;;;;AAOlB;GAnbwB;;QAcP,qIAAA,CAAA,YAAS;;;KAdF","debugId":null}}]
}